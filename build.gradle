buildscript {
  repositories {
    jcenter()
  }
}

plugins {
  id 'checkstyle'
  id 'io.spring.dependency-management' version '1.1.4'
  id 'org.springframework.boot' version '2.3.1.RELEASE'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.owasp.dependencycheck' version '5.3.2.1'
}

apply plugin: 'checkstyle'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "DEV-SNAPSHOT"

group 'uk.gov.hmcts.reform'
version buildNumber

sourceCompatibility = 11

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.33'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDirectory.set(new File(rootDir, 'config/checkstyle'))
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror" << '-Xlint:deprecation'
}

task integration(type: Test) {
  description = 'Runs integration tests'
  group = 'Verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }

  failFast = true
}

repositories {
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
  maven {
    url 'https://repo.spring.io/libs-milestone'
  }
  jcenter()
  mavenLocal()
}

jar {
  manifest {
    attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
  }
}

task printVersion {
  doLast {
    print project.version
  }
}


def pomConfig = {
  licenses {
    license {
      name "MIT License"
      url "http://www.opensource.org/licenses/mit-license.php"
      distribution "repo"
    }
  }

  scm {
    url "https://github.com/hmcts/document-management-client"
  }
}


task sourcesJar(type: Jar, dependsOn: classes) {
  getArchiveClassifier().set('sources')
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  getArchiveClassifier().set('javadoc')
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

publishing {
  publications {
    Main(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId project.group
      artifactId 'document-management-client'
      version project.version

      pom.withXml {
        def root = asNode()
        root.appendNode('description', 'Client library for communicating with document management api')
        root.appendNode('name', 'Document management client')
        root.appendNode('url', 'https://github.com/hmcts/document-management-client')
        root.children().last() + pomConfig
      }
    }
  }
}


def versions = [
  junit             : '5.10.2',
  junitPlatform     : '1.10.2',
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

ext {
  springCloudVersion = 'Hoxton.SR5'
}

dependencies {
  api group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  api group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  api group: 'io.github.openfeign', name: 'feign-jackson', version: '13.2.1'

  testImplementation libraries.junit5
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.25.3'
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.10.0'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  integrationTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '2.2.6.RELEASE', {
    exclude group: 'com.github.tomakehurst', module: 'wiremock-jre8-standalone'
  }
  integrationTestImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.35.1'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
  dependencies {
    // CVE-2019-10086 until 1.9.3
    dependencySet(group: 'commons-beanutils', version: '1.9.4') {
      entry 'commons-beanutils'
    }
  }
}

bootJar {
  enabled = false
}

jar {
  enabled = true
}
